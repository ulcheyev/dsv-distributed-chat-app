syntax ="proto3";
option java_multiple_files = true;
package generated;


message Empty {}

message StringPayload {
  string msg = 1;
}

message Message {
  Remote remote = 1;
  string msg = 2;
}

message Rooms {
  repeated RoomEntry rooms = 1;
}

message RoomEntry {
  Remote roomOwner = 1;
  string roomName = 2;
}

message Remote {
  int64 nodeId = 1;
  string hostname = 2;
  int32 port = 3;
  string username = 4;
}

message RemoteResponse {
  // Indicator of adding or not
  bool added = 1;
  // Connected node room
  string room = 2;
}

message Neighbours {
  Remote next = 1;
  Remote nextNext = 2;
  Remote prev = 3;
  Remote leader = 4;
}

message JoinRequest {
  string roomName = 1;
  Remote remote = 2;
}

message JoinResponse {
  bool isLeader = 1;
  // 1. If isLeader == false => it is not leader, sends leader address to request to join

  // 2. If isLeader == true => it is leader, sends requested room leader
  //    a) maybe leader will be current node (when room does not exist)
  Remote leader = 2;
  Neighbours neighbours = 3;
}

message PermissionRequest {
  Remote requestByRemote = 1;
  int32 clock = 2;
}

message PermissionResponse {
  bool granted = 1;
  Remote responseByRemote = 2;
}

message Health {
  bool isAlive = 1;
}

service RemotesService {

  // Connecting methods
  rpc joinRoom(JoinRequest) returns (JoinResponse); // To connect to room
  rpc exitRoom(Remote) returns (Empty);
  rpc preflight(Remote) returns (stream Message); // To get message streamobserver
  rpc receiveRooms(Rooms) returns (Empty);
  rpc receiveRoom(RoomEntry) returns (Empty);
  rpc removeRoom(RoomEntry) returns (Empty);

  // Methods to control CS when non existing rooms are creating
  rpc receivePermissionRequest(PermissionRequest) returns (Empty);
  rpc receivePermissionResponse(PermissionResponse) returns (Empty);

  // Chat methods
  rpc receiveMessage(Message) returns (Empty);
  rpc receiveGetRoomListRequest(Empty) returns (StringPayload);
  rpc receiveGetNodeListInCurrentRoomRequest(Empty) returns (StringPayload);

  //Leader election
  rpc changeNextNext(Remote) returns (Empty);
  rpc changePrev(Remote) returns (Remote);
  rpc election(Remote) returns (Empty);
  rpc elected(Remote) returns (Empty);
  rpc repairTopology(Remote) returns (Empty);
  rpc changeNeighbours(JoinRequest) returns (Neighbours);

  rpc beat(Empty) returns (Health);
}


